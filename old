if (!waitingQueue.empty()) {
      for (size_t i = 0; i < queueSize; i++) {
        temp.push_front(std::move(waitingQueue.front()));
        waitingQueue.pop_front();
        for (int j = 0; j < temp.size() ; j++) {
          *(stations.at(j)) += std::move(temp.at(j));
          stations.at(j)->fill(os);
          stations.at(j)->pop(temp.at(j));
          if (j == stations.size()) {
            if (stations.at(j)->hasAnOrderToRelease()) {
              completed.push_back(std::move(temp.front()));
            }
            else {
              incomplete.push_back(std::move(temp.front()));
            }
            temp.pop_front();
          }
        }
      }
      while (temp.size()) {
        for (size_t j = 0; j < temp.size(); j++) {
          *(stations.at(j)) += std::move(temp.at(j));
          stations.at(j)->fill(os);
          stations.at(j)->pop(temp.at(j));
          if (j == temp.size() - 1) {
            if (stations.at(j)->hasAnOrderToRelease()) {
              completed.push_back(std::move(temp.back()));
            }
            else {
              incomplete.push_back(std::move(temp.back()));
            }
            temp.pop_back();
          }
        }
      }
      allProcessed = true;
    }
    else { allProcessed = false; }